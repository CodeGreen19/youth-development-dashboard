generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Branch {
  id            String        @id @default(uuid())
  password      String?
  role          Role          @default(USER)
  isVarified    Boolean       @default(false)
  disabled      Boolean       @default(false)
  branchInfo    BranchInfo?
  personalInfo  PersonalInfo?
  moreInfo      MoreInfo?
  documents     Document?
  students      Student[]
  paymentInfo   Payment[]
  isOneTimePaid Boolean       @default(false)
  otp           Int?
  otpToken      String?
  otpSentDate   DateTime?
  createdAt     DateTime      @default(now())
}

enum Role {
  USER
  ADMIN
}

model BranchInfo {
  id            String @id @default(uuid())
  branchNo      Int?   @default(autoincrement())
  branchName    String
  branchMobile  String
  branchEmail   String
  instituteAge  String
  noOfComputers String
  branchId      String @unique
  branch        Branch @relation(fields: [branchId], references: [id])
}

model PersonalInfo {
  id          String @id @default(uuid())
  fullName    String
  fathersName String
  mothersName String
  gender      String
  bloodGroup  String
  branchId    String @unique
  branch      Branch @relation(fields: [branchId], references: [id])
}

model MoreInfo {
  id               String  @id @default(uuid())
  additionalMobile String?
  division         String
  district         String
  upazila          String
  address          String
  postcode         String?
  branchId         String  @unique
  branch           Branch  @relation(fields: [branchId], references: [id])
}

model Document {
  id             String @id @default(uuid())
  ppSizePhoto    String
  tradeLicense   String
  nationalIDCard String
  signature      String
  branchId       String @unique
  branch         Branch @relation(fields: [branchId], references: [id])
}

// student model 
model Student {
  id             String       @id @default(uuid())
  name           String
  fatherName     String
  motherName     String
  mobile         String
  docs           StudentDocs?
  isPaid         Boolean      @default(false)
  gender         String
  dateOfBirth    String
  nationality    String
  religion       String
  bloodGroup     String
  email          String?
  courseDuration String
  courseRange    String
  courseTrade    String
  mediam         String
  passedBoard    String
  passedYear     String
  passedRoll     String
  passedResult   String
  genRoll        String?
  genReg         String?
  genResult      String?
  passedType     PassedType
  transId        String?
  branchId       String
  branch         Branch       @relation(fields: [branchId], references: [id])
  createdAt      DateTime     @default(now())
}

enum PassedType {
  JSC
  SSC
}

model StudentDocs {
  profileUrl          String
  registrationCardUrl String
  studentId           String  @unique
  student             Student @relation(fields: [studentId], references: [id])
}

model Payment {
  id             String   @id @default(uuid())
  name           String
  roll           String
  courseDuration String
  courseTrade    String
  amount         String
  phoneNo        String
  status         String   @default("success")
  branchId       String   @unique
  branch         Branch   @relation(fields: [branchId], references: [id])
  createdAt      DateTime @default(now())
}

// course fees

model CourseFees {
  id          String   @id @default(uuid())
  name        String
  threeMonths String
  sixMonths   String
  oneYear     String
  twoYears    String
  threeYears  String
  fourYears   String
  createdAt   DateTime @default(now())
}

// notice and other 
model Notice {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
}

model Gallery {
  id        String   @id @default(uuid())
  imgUrl    String
  text      String
  createdAt DateTime @default(now())
}
